package common.io.json

import java.lang.annotation.Documentedimport
import java.lang.annotation.Retention
import java.lang.annotation.RetentionPolicy
import kotlin.reflect.KClass

@Documented
@Retention(RetentionPolicy.RUNTIME)
@Target(AnnotationTarget.ANNOTATION_CLASS, AnnotationTarget.CLASS)
annotation class JsonClass(
        /** treat this class as collection  */
        val bypass: Boolean = false, val generator: String = "",
        /** determines how to reat fields with no JsonFiel annotation  */
        val noTag: NoTag = NoTag.OMIT, val read: RType = RType.DATA, val serializer: String = "", val write: WType = WType.DEF) {
    /** indicates that this constructor is only used by JSON  */
    @Target(AnnotationTarget.CONSTRUCTOR)
    annotation class JCConstructor

    /** indicates that this class can be loaded with a value of another class  */
    @Documented
    @Retention(RetentionPolicy.RUNTIME)
    @Target(AnnotationTarget.ANNOTATION_CLASS, AnnotationTarget.CLASS)
    annotation class JCGeneric(vararg val value: KClass<*>)

    @Documented
    @Retention(RetentionPolicy.RUNTIME)
    @Target(AnnotationTarget.FUNCTION, AnnotationTarget.PROPERTY_GETTER, AnnotationTarget.PROPERTY_SETTER)
    annotation class JCGetter

    @Documented
    @Retention(RetentionPolicy.RUNTIME)
    @Target(AnnotationTarget.FIELD)
    annotation class JCIdentifier
    enum class NoTag {
        OMIT, LOAD
    }

    enum class RType {
        /**
         * generated from json, requires default constructor, no not allow generate tag
         */
        DATA,

        /** generated by holder class, requires generator tag  */
        FILL,

        /** generated from json, requires generator method with parameter JsonObject  */
        MANUAL
    }

    enum class WType {
        DEF, CLASS
    }
}
